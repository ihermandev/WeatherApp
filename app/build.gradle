plugins {
    id 'com.android.application'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

apply from: "$rootDir/gradle/versions.gradle"

def properties = new Properties()
def propertiesFile = rootProject.file('local.properties')

if (propertiesFile.exists()) {
    propertiesFile.withReader('UTF-8') { reader ->
        properties.load(reader)
    }
} else {
    throw new GradleException("local.properties file not found.")
}

if (properties['GOOGLE_PLACES_API_KEY'] == null) {
    throw new GradleException("GOOGLE_PLACES_API_KEY not found.")
}

android {
    compileSdkVersion androidCompileSdk

    defaultConfig {
        applicationId "i.herman.weatherapp"
        minSdkVersion androidMinSdk
        targetSdkVersion androidTargetSdk
        versionCode versionCode
        versionName versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            buildConfigField "String", "GOOGLE_PLACES_API_KEY", '"' + properties.getProperty("GOOGLE_PLACES_API_KEY") + '"'
            buildConfigField "String", "OPEN_METEO_URL", '"https://api.open-meteo.com/"'

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            buildConfigField "String", "GOOGLE_PLACES_API_KEY", '"' + properties.getProperty("GOOGLE_PLACES_API_KEY") + '"'
            buildConfigField "String", "OPEN_METEO_URL", '"https://api.open-meteo.com/"'

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()

        freeCompilerArgs +=[
                '-Xopt-in=kotlin.RequiresOptIn'
        ]
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion composeVersion
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    //Android
    implementation "androidx.core:core-ktx:$androidxCoreKtxVersion"
    implementation "androidx.activity:activity-compose:$androidxActivityComposeVersion"
    implementation "androidx.legacy:legacy-support-v4:$androidxLegacyVersion"
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "com.google.android.material:material:$materialVersion"

    //Lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"

    //Navigation
    implementation "androidx.navigation:navigation-compose:$navVersion"

    //Google Places api
    implementation "com.google.android.libraries.places:places:$googlePlacesVersion"

    // KotlinX Date Time
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinxDateTimeVersion"

    //Room
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    //Compose
    implementation "androidx.compose.ui:ui:$composeVersion"
    implementation("androidx.compose.foundation:foundation:$composeVersion")
    implementation "androidx.compose.material3:material3:$composeMaterialVeraion"
    implementation "androidx.compose.material:material:$composeVersion"
    implementation "androidx.compose.ui:ui-tooling-preview:$composeVersion"
    implementation("androidx.compose.ui:ui-tooling:$composeVersion")
    implementation("androidx.compose.runtime:runtime:$composeVersion")

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    // Hilt - Dependency injection
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation "androidx.hilt:hilt-navigation-compose:$hiltNavigationComposeVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"

    // JavaX Inject
    implementation "javax.inject:javax.inject:$javaxInjectVersion"

    // Retrofit - HTTP Request manager
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // OkHTTP with logging
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    //Gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    // Locally tests
    // JUnit
    testImplementation "junit:junit:$jUnitVerstion"

    // Mocking
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"

    // Assertions
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "com.shazam:shazamcrest:$shazamcrestVersion"

    // Testing coroutines & flows
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // Instrumentation tests
    androidTestImplementation "androidx.test.ext:junit:$jUnitExtVersion"

    // Testing coroutines & flows
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // Espresso & Compose testing
    androidTestImplementation "androidx.test.ext:junit:$jUnitExtVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCoreVersion"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$composeVersion"
}
